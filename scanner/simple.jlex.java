/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;

//-----------------------------------------------------------------------------

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type 
// TokenVal.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (e.g., literals) also include the value of the token.

//-----------------------------------------------------------------------------


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>simple.jlex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\60\1\60\1\1\16\10\4\0\1\3\1\23"+
    "\1\12\1\0\1\7\1\0\1\24\1\0\1\15\1\16\1\5\1\22"+
    "\1\17\1\11\1\42\1\4\12\6\1\0\1\21\1\26\1\20\1\27"+
    "\2\0\22\7\1\30\7\7\1\0\1\57\2\0\1\7\1\0\1\50"+
    "\1\47\1\51\1\52\1\40\1\53\1\35\1\56\1\33\2\7\1\46"+
    "\1\41\1\34\1\43\1\45\1\7\1\32\1\37\1\31\1\44\1\54"+
    "\1\55\1\7\1\36\1\7\1\13\1\25\1\14\1\0\6\10\1\61"+
    "\32\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0"+
    "\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7"+
    "\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7"+
    "\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0\246\7"+
    "\1\0\46\7\2\0\1\7\6\0\51\7\6\0\1\7\1\0\55\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7"+
    "\4\0\4\7\15\0\6\10\5\0\1\7\4\0\13\10\1\0\1\10"+
    "\3\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10"+
    "\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0"+
    "\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10"+
    "\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7\2\0\1\10"+
    "\30\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7"+
    "\3\10\4\0\13\7\5\0\30\7\1\0\6\7\1\0\2\10\6\0"+
    "\10\10\52\7\72\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7"+
    "\2\10\2\0\12\10\1\0\20\7\3\10\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10"+
    "\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0"+
    "\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0\2\7\1\0"+
    "\1\10\2\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0"+
    "\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0"+
    "\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0"+
    "\2\7\2\10\2\0\12\10\1\0\1\7\7\0\1\7\6\10\1\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\7\0\3\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10"+
    "\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0"+
    "\1\7\6\0\1\10\16\0\12\10\11\0\1\7\6\0\5\10\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\20\7\2\0\1\10\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\1\0\3\7\2\0\1\7"+
    "\2\0\2\7\2\10\2\0\12\10\20\0\1\7\3\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\6\0\2\7"+
    "\1\0\2\7\2\10\2\0\12\10\1\0\2\7\1\10\14\0\4\10"+
    "\11\7\1\0\3\7\1\0\51\7\2\10\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\1\7\5\0\3\7\1\10\7\0\3\7\2\10\2\0"+
    "\12\10\12\0\6\7\1\0\3\10\1\0\22\7\3\0\30\7\1\0"+
    "\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\6\0\12\10\2\0\2\10\15\0\60\7\1\10"+
    "\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0"+
    "\1\7\1\0\5\7\1\0\30\7\1\0\1\7\1\0\12\7\1\10"+
    "\2\7\11\10\1\7\2\0\5\7\1\0\1\7\1\0\7\10\1\0"+
    "\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0\12\10\13\0"+
    "\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7"+
    "\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10"+
    "\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10"+
    "\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10"+
    "\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7"+
    "\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"+
    "\2\0\3\10\40\0\20\7\20\0\126\7\2\0\6\7\3\0\u026c\7"+
    "\2\0\21\7\1\0\32\7\5\0\113\7\3\0\13\7\7\0\22\7"+
    "\4\10\11\0\23\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0"+
    "\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7"+
    "\1\10\2\0\12\10\41\0\17\10\6\0\131\7\7\0\5\7\2\10"+
    "\42\7\1\10\1\7\5\0\106\7\12\0\37\7\1\0\14\10\4\0"+
    "\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7\4\0\32\7"+
    "\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10\1\0\35\10"+
    "\2\0\13\10\6\0\12\10\15\0\1\7\10\0\16\10\1\0\20\10"+
    "\61\0\5\10\57\7\21\10\10\7\3\0\12\10\21\0\11\10\14\0"+
    "\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10"+
    "\10\0\12\10\3\0\3\7\12\10\44\7\2\0\11\7\7\0\53\7"+
    "\2\0\3\7\20\0\3\10\1\0\25\10\4\7\1\10\6\7\1\10"+
    "\2\7\3\10\1\7\5\0\300\7\100\10\u0116\7\2\0\6\7\2\0"+
    "\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0"+
    "\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0"+
    "\3\7\1\0\7\7\16\0\5\10\30\0\1\60\1\60\5\10\20\0"+
    "\2\7\23\0\1\7\13\0\5\10\1\0\12\10\1\0\1\7\15\0"+
    "\1\7\20\0\15\7\3\0\41\7\17\0\15\10\4\0\1\10\3\0"+
    "\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0"+
    "\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\13\7\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0"+
    "\345\7\6\0\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0"+
    "\1\7\2\0\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7"+
    "\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0"+
    "\2\10\2\0\3\7\1\0\132\7\1\0\4\7\5\0\53\7\1\0"+
    "\136\7\21\0\40\7\60\0\20\7\u0200\0\u19c0\7\100\0\u568d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\37\7\2\10\120\7\2\10\45\0\11\7\2\0"+
    "\147\7\2\0\100\7\5\0\2\7\1\0\1\7\1\0\5\7\30\0"+
    "\20\7\1\10\3\7\1\10\4\7\1\10\27\7\5\10\4\0\1\10"+
    "\13\0\1\7\7\0\64\7\14\0\2\10\62\7\22\10\12\0\12\10"+
    "\6\0\22\10\6\7\3\0\1\7\1\0\2\7\13\10\34\7\10\10"+
    "\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10\16\0"+
    "\1\7\12\10\6\0\5\7\1\10\12\7\12\10\5\7\1\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\3\10\62\7\1\10\1\7\3\10\2\7\2\10\5\7"+
    "\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10\2\0"+
    "\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"+
    "\1\0\7\7\1\0\53\7\1\0\16\7\6\0\163\7\10\10\1\0"+
    "\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0"+
    "\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10"+
    "\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0"+
    "\15\7\3\0\20\10\20\0\20\10\3\0\2\7\30\0\3\7\31\0"+
    "\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0"+
    "\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0"+
    "\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0"+
    "\2\7\22\0\3\10\4\0\14\7\1\0\32\7\1\0\23\7\1\0"+
    "\2\7\1\0\17\7\2\0\16\7\42\0\173\7\105\0\65\7\210\0"+
    "\1\10\202\0\35\7\3\0\61\7\17\0\1\10\37\0\40\7\15\0"+
    "\36\7\5\0\46\7\5\10\5\0\36\7\2\0\44\7\4\0\10\7"+
    "\1\0\5\7\52\0\236\7\2\0\12\10\6\0\44\7\4\0\44\7"+
    "\4\0\50\7\10\0\64\7\14\0\13\7\1\0\17\7\1\0\7\7"+
    "\1\0\2\7\1\0\13\7\1\0\17\7\1\0\7\7\1\0\2\7"+
    "\103\0\u0137\7\11\0\26\7\12\0\10\7\30\0\6\7\1\0\52\7"+
    "\1\0\11\7\105\0\6\7\2\0\1\7\1\0\54\7\1\0\2\7"+
    "\3\0\1\7\2\0\27\7\12\0\27\7\11\0\37\7\101\0\23\7"+
    "\1\0\2\7\12\0\26\7\12\0\32\7\106\0\70\7\6\0\2\7"+
    "\100\0\1\7\3\10\1\0\2\10\5\0\4\10\4\7\1\0\3\7"+
    "\1\0\35\7\2\0\3\10\4\0\1\10\40\0\35\7\3\0\35\7"+
    "\43\0\10\7\1\0\34\7\2\10\31\0\66\7\12\0\26\7\12\0"+
    "\23\7\15\0\22\7\156\0\111\7\67\0\63\7\15\0\63\7\15\0"+
    "\44\7\4\10\10\0\12\10\u0146\0\52\7\1\0\2\10\3\0\2\7"+
    "\113\0\3\10\35\7\12\0\1\7\10\0\26\7\13\10\37\0\22\7"+
    "\4\10\52\0\25\7\33\0\27\7\11\0\3\10\65\7\17\10\37\0"+
    "\13\10\2\7\2\10\1\7\11\0\4\10\55\7\13\10\2\0\1\10"+
    "\4\0\1\10\12\0\1\10\2\0\31\7\7\0\12\10\6\0\3\10"+
    "\44\7\16\10\1\0\12\10\4\0\1\7\2\10\1\7\10\0\43\7"+
    "\1\10\2\0\1\7\11\0\3\10\60\7\16\10\4\7\4\0\4\10"+
    "\1\0\14\10\1\7\1\0\1\7\43\0\22\7\1\0\31\7\14\10"+
    "\6\0\1\10\2\7\1\10\76\0\7\7\1\0\1\7\1\0\4\7"+
    "\1\0\17\7\1\0\12\7\7\0\57\7\14\10\5\0\12\10\6\0"+
    "\4\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\1\0\2\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\2\0\1\7\6\0\1\10\5\0\5\7\2\10\2\0\7\10"+
    "\3\0\5\10\213\0\65\7\22\10\4\7\5\0\12\10\4\0\1\10"+
    "\3\7\36\0\60\7\24\10\2\7\1\0\1\7\10\0\12\10\246\0"+
    "\57\7\7\10\2\0\11\10\27\0\4\7\2\10\42\0\60\7\21\10"+
    "\3\0\1\7\13\0\12\10\46\0\53\7\15\10\1\7\7\0\12\10"+
    "\66\0\33\7\2\0\17\10\4\0\12\10\6\0\7\7\271\0\54\7"+
    "\17\10\145\0\100\7\12\10\25\0\10\7\2\0\1\7\2\0\10\7"+
    "\1\0\2\7\1\0\30\7\6\10\1\0\2\10\2\0\4\10\1\7"+
    "\1\10\1\7\2\10\14\0\12\10\106\0\10\7\2\0\47\7\7\10"+
    "\2\0\7\10\1\7\1\0\1\7\1\10\33\0\1\7\12\10\50\7"+
    "\7\10\1\7\4\10\10\0\1\10\10\0\1\7\13\10\56\7\20\10"+
    "\3\0\1\7\22\0\111\7\u0107\0\11\7\1\0\45\7\10\10\1\0"+
    "\10\10\1\7\17\0\12\10\30\0\36\7\2\0\26\10\1\0\16\10"+
    "\111\0\7\7\1\0\2\7\1\0\46\7\6\10\3\0\1\10\1\0"+
    "\2\10\1\0\7\10\1\7\1\10\10\0\12\10\6\0\6\7\1\0"+
    "\2\7\1\0\40\7\5\10\1\0\2\10\1\0\5\10\1\7\7\0"+
    "\12\10\u0136\0\23\7\4\10\11\0\2\10\1\7\1\10\15\7\1\0"+
    "\42\7\7\10\3\0\5\10\15\0\12\10\126\0\1\7\54\0\4\7"+
    "\37\0\u039a\7\146\0\157\7\21\0\304\7\u0a4c\0\141\7\17\0\u0430\7"+
    "\21\10\6\7\17\10\u0faa\0\u0247\7\u21b9\0\u0239\7\7\0\37\7\1\0"+
    "\12\10\6\0\117\7\1\0\12\10\6\0\36\7\2\0\5\10\13\0"+
    "\60\7\7\10\11\0\4\7\14\0\12\10\11\0\25\7\5\0\23\7"+
    "\u02b0\0\100\7\200\0\113\7\4\0\1\10\1\7\67\10\7\0\4\10"+
    "\15\7\100\0\2\7\1\0\1\7\1\10\13\0\2\10\16\0\u17f8\7"+
    "\10\0\u04d6\7\52\0\11\7\u22e7\0\4\7\1\0\7\7\1\0\2\7"+
    "\1\0\u0123\7\17\0\1\7\35\0\3\7\2\0\1\7\16\0\4\7"+
    "\10\0\u018c\7\u0904\0\153\7\5\0\15\7\3\0\11\7\7\0\12\7"+
    "\3\0\2\10\1\0\4\10\u125c\0\56\10\2\0\27\10\u021e\0\5\10"+
    "\3\0\26\10\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\7"+
    "\1\0\107\7\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7"+
    "\1\0\14\7\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7"+
    "\2\0\10\7\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7"+
    "\1\0\1\7\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\10"+
    "\u0200\0\67\10\4\0\62\10\10\0\1\10\16\0\1\10\26\0\5\10"+
    "\1\0\17\10\u0450\0\37\7\6\0\6\7\325\0\7\10\1\0\21\10"+
    "\2\0\7\10\1\0\2\10\1\0\5\10\5\0\76\7\41\0\1\10"+
    "\160\0\55\7\3\0\7\10\7\7\2\0\12\10\4\0\1\7\u0141\0"+
    "\36\7\1\10\21\0\54\7\16\10\5\0\1\7\u01d0\0\34\7\16\10"+
    "\u02e6\0\7\7\1\0\4\7\1\0\2\7\1\0\17\7\1\0\305\7"+
    "\13\0\7\10\51\0\104\7\7\10\1\7\4\0\12\10\u0356\0\1\7"+
    "\u014f\0\4\7\1\0\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7"+
    "\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7"+
    "\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\21\7"+
    "\5\0\3\7\1\0\5\7\1\0\21\7\u0d34\0\12\10\u0406\0\ua6e0\7"+
    "\40\0\u103a\7\6\0\336\7\2\0\u1682\7\16\0\u1d31\7\u0c1f\0\u021e\7"+
    "\u05e2\0\u134b\7\5\0\u1060\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udc5b\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\1\1\22\1\23\17\6\1\24\1\25"+
    "\1\26\1\27\1\2\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\5\6\1\36\3\6\1\33\6\6\1\37"+
    "\3\6\1\40\1\41\1\42\1\43\1\2\2\0\4\6"+
    "\1\44\5\6\1\32\6\6\1\0\1\2\2\6\1\45"+
    "\3\6\1\46\3\6\1\47\2\6\1\50\10\6\1\51"+
    "\1\6\1\52\1\53\1\54\1\6\1\55\1\56\1\57"+
    "\1\60\2\6\1\0\1\61\1\62\12\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\144\0\226\0\144\0\310\0\372"+
    "\0\310\0\144\0\144\0\144\0\144\0\144\0\144\0\u012c"+
    "\0\144\0\310\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\144"+
    "\0\144\0\u0578\0\u05aa\0\u05dc\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\372"+
    "\0\u0708\0\u073a\0\u076c\0\372\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\372\0\u08ca\0\u08fc\0\u092e\0\144\0\144"+
    "\0\144\0\144\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0a8c\0\372\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\372"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0992"+
    "\0\u0d16\0\u0d48\0\372\0\u0d7a\0\u0dac\0\u0dde\0\372\0\u0e10"+
    "\0\u0e42\0\u0e74\0\372\0\u0ea6\0\u0ed8\0\372\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\372\0\u109a"+
    "\0\372\0\372\0\372\0\u10cc\0\372\0\372\0\372\0\372"+
    "\0\u10fe\0\u1130\0\u1162\0\372\0\372\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\3\10\1\34\1\35\1\10\1\3\1\36"+
    "\1\10\1\37\1\10\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\10\1\3\2\0\1\47\1\0\1\50"+
    "\7\47\1\51\44\47\1\52\2\47\66\0\1\53\1\54"+
    "\62\0\1\7\61\0\3\10\17\0\12\10\1\0\14\10"+
    "\2\0\1\10\20\0\1\55\61\0\1\56\65\0\1\57"+
    "\62\0\1\60\54\0\1\61\61\0\1\62\47\0\3\10"+
    "\17\0\1\10\1\63\4\10\1\64\3\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\2\10\1\65\7\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\10\10"+
    "\1\66\1\10\1\0\14\10\2\0\1\10\6\0\3\10"+
    "\17\0\4\10\1\67\5\10\1\0\10\10\1\70\3\10"+
    "\2\0\1\10\6\0\3\10\17\0\1\10\1\71\10\10"+
    "\1\0\12\10\1\72\1\10\2\0\1\10\6\0\3\10"+
    "\17\0\12\10\1\0\3\10\1\73\10\10\2\0\1\10"+
    "\6\0\3\10\17\0\2\10\1\74\7\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\12\10\1\0\1\10"+
    "\1\75\12\10\2\0\1\10\6\0\3\10\17\0\12\10"+
    "\1\0\1\76\13\10\2\0\1\10\6\0\3\10\17\0"+
    "\4\10\1\77\5\10\1\0\14\10\2\0\1\10\6\0"+
    "\3\10\17\0\12\10\1\0\3\10\1\100\1\10\1\101"+
    "\6\10\2\0\1\10\6\0\3\10\17\0\10\10\1\102"+
    "\1\10\1\0\1\103\13\10\2\0\1\10\6\0\3\10"+
    "\17\0\12\10\1\0\5\10\1\104\6\10\2\0\1\10"+
    "\6\0\3\10\17\0\12\10\1\0\1\105\13\10\2\0"+
    "\1\10\6\0\3\10\17\0\12\10\1\0\13\10\1\106"+
    "\2\0\1\10\1\47\2\0\7\47\1\0\44\47\1\0"+
    "\2\47\12\0\1\107\16\0\1\110\1\111\1\0\1\112"+
    "\25\0\1\53\1\113\1\4\57\53\5\114\1\115\54\114"+
    "\6\0\3\10\17\0\2\10\1\116\7\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\7\10\1\117\2\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\12\10"+
    "\1\0\1\10\1\120\12\10\2\0\1\10\6\0\3\10"+
    "\17\0\1\10\1\121\10\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\1\10\1\122\10\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\12\10\1\0\5\10"+
    "\1\123\6\10\2\0\1\10\6\0\3\10\17\0\3\10"+
    "\1\124\6\10\1\0\14\10\2\0\1\10\6\0\3\10"+
    "\17\0\7\10\1\125\2\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\12\10\1\0\4\10\1\126\7\10"+
    "\2\0\1\10\6\0\3\10\17\0\12\10\1\0\1\127"+
    "\13\10\2\0\1\10\6\0\3\10\17\0\12\10\1\0"+
    "\7\10\1\130\4\10\2\0\1\10\6\0\3\10\17\0"+
    "\12\10\1\0\5\10\1\131\6\10\2\0\1\10\6\0"+
    "\3\10\17\0\7\10\1\132\2\10\1\0\14\10\2\0"+
    "\1\10\6\0\3\10\17\0\12\10\1\0\10\10\1\133"+
    "\3\10\2\0\1\10\6\0\3\10\17\0\12\10\1\0"+
    "\3\10\1\134\10\10\2\0\1\10\6\0\3\10\17\0"+
    "\3\10\1\135\6\10\1\0\14\10\2\0\1\10\6\0"+
    "\3\10\17\0\3\10\1\136\6\10\1\0\14\10\2\0"+
    "\1\10\2\0\1\4\57\0\5\114\1\137\60\114\1\140"+
    "\1\137\54\114\6\0\3\10\17\0\3\10\1\141\6\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\1\10"+
    "\1\142\10\10\1\0\14\10\2\0\1\10\6\0\3\10"+
    "\17\0\10\10\1\143\1\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\12\10\1\0\1\10\1\144\12\10"+
    "\2\0\1\10\6\0\3\10\17\0\1\10\1\145\10\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\1\10"+
    "\1\146\10\10\1\0\14\10\2\0\1\10\6\0\3\10"+
    "\17\0\10\10\1\147\1\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\12\10\1\0\3\10\1\150\10\10"+
    "\2\0\1\10\6\0\3\10\17\0\12\10\1\0\3\10"+
    "\1\151\10\10\2\0\1\10\6\0\3\10\17\0\7\10"+
    "\1\152\2\10\1\0\14\10\2\0\1\10\6\0\3\10"+
    "\17\0\10\10\1\153\1\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\12\10\1\0\5\10\1\154\6\10"+
    "\2\0\1\10\6\0\3\10\17\0\7\10\1\155\2\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\12\10"+
    "\1\0\7\10\1\156\4\10\2\0\1\10\6\0\3\10"+
    "\17\0\12\10\1\0\3\10\1\157\10\10\2\0\1\10"+
    "\4\114\1\4\1\137\54\114\6\0\3\10\17\0\4\10"+
    "\1\160\5\10\1\0\14\10\2\0\1\10\6\0\3\10"+
    "\17\0\10\10\1\161\1\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\2\10\1\162\7\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\3\10\1\163\6\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\12\10"+
    "\1\0\6\10\1\164\5\10\2\0\1\10\6\0\3\10"+
    "\17\0\3\10\1\165\6\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\10\10\1\166\1\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\7\10\1\167\2\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\12\10"+
    "\1\0\1\10\1\170\12\10\2\0\1\10\6\0\3\10"+
    "\17\0\10\10\1\171\1\10\1\0\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\10\10\1\172\1\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\5\10\1\173\4\10"+
    "\1\0\14\10\2\0\1\10\6\0\3\10\17\0\11\10"+
    "\1\174\1\0\14\10\2\0\1\10\6\0\3\10\17\0"+
    "\4\10\1\175\5\10\1\0\14\10\2\0\1\10\6\0"+
    "\3\10\17\0\12\10\1\0\6\10\1\176\5\10\2\0"+
    "\1\10\6\0\3\10\17\0\12\10\1\0\13\10\1\177"+
    "\2\0\1\10\6\0\3\10\17\0\12\10\1\0\6\10"+
    "\1\200\5\10\2\0\1\10\6\0\3\10\17\0\12\10"+
    "\1\0\5\10\1\201\6\10\2\0\1\10\6\0\3\10"+
    "\17\0\12\10\1\0\3\10\1\202\10\10\2\0\1\10"+
    "\6\0\3\10\17\0\12\10\1\203\14\10\2\0\1\10"+
    "\6\0\3\10\17\0\4\10\1\204\5\10\1\0\14\10"+
    "\2\0\1\10\6\0\3\10\17\0\1\10\1\205\10\10"+
    "\1\0\14\10\2\0\1\10\43\0\1\206\62\0\1\207"+
    "\46\0\1\210\72\0\1\211\64\0\1\212\46\0\1\213"+
    "\62\0\1\214\62\0\1\215\56\0\1\216\76\0\1\217"+
    "\47\0\1\220\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\3\1\6\11\1\1\1\11"+
    "\26\1\2\11\2\1\1\0\6\11\24\1\4\11\1\1"+
    "\2\0\21\1\1\0\43\1\1\0\2\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3866) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);
		Errors.fatal(yyline+1, yycolumn,
			"String was never closed! " + string.toString() 
		);
            }  // fall though
            case 145: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Errors.fatal(yyline+1, yycolumn,
		"ignoring illegal character: " + yytext()
	);
            } 
            // fall through
          case 52: break;
          case 2: 
            { 
            } 
            // fall through
          case 53: break;
          case 3: 
            { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 54: break;
          case 4: 
            { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 55: break;
          case 5: 
            { try {
			int val = Integer.parseInt(yytext());
			Symbol S = new Symbol(sym.INTLITERAL,
				new IntLitTokenVal(yyline+1, yycolumn, val)
			);

			return S;

		} catch(NumberFormatException e) {
			Errors.warn(yyline+1, yycolumn, "Value out of bounds!");
		}
            } 
            // fall through
          case 56: break;
          case 6: 
            { String val = yytext();
		Symbol S = new Symbol(sym.ID, new IdentifierTokenValue(yyline+1, yycolumn, val));
		return S;
            } 
            // fall through
          case 57: break;
          case 7: 
            { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 58: break;
          case 8: 
            { string.setLength(0); yybegin(STRING);
            } 
            // fall through
          case 59: break;
          case 9: 
            { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 60: break;
          case 10: 
            { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 61: break;
          case 11: 
            { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 62: break;
          case 12: 
            { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 63: break;
          case 13: 
            { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 64: break;
          case 14: 
            { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 65: break;
          case 15: 
            { Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 66: break;
          case 16: 
            { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 67: break;
          case 17: 
            { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 68: break;
          case 18: 
            { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 69: break;
          case 19: 
            { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 70: break;
          case 20: 
            { string.append(yytext());
            } 
            // fall through
          case 71: break;
          case 21: 
            { yybegin(YYINITIAL);
		Errors.fatal(yyline+1, yycolumn,
			"String was never closed! " + string.toString() 
		);
            } 
            // fall through
          case 72: break;
          case 22: 
            { yybegin(YYINITIAL); 
		Symbol S = new Symbol(
			sym.STRINGLITERAL,
			new StringTokenValue(yyline+1, yycolumn, string.toString())
		); 
		return S;
            } 
            // fall through
          case 73: break;
          case 23: 
            { string.append('\\');
            } 
            // fall through
          case 74: break;
          case 24: 
            { Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 75: break;
          case 25: 
            { Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 76: break;
          case 26: 
            { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 77: break;
          case 27: 
            { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 78: break;
          case 28: 
            { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 79: break;
          case 29: 
            { Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 80: break;
          case 30: 
            { Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 81: break;
          case 31: 
            { Symbol S = new Symbol(sym.DO, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 82: break;
          case 32: 
            { string.append('\"');
            } 
            // fall through
          case 83: break;
          case 33: 
            { string.append('\t');
            } 
            // fall through
          case 84: break;
          case 34: 
            { string.append('\r');
            } 
            // fall through
          case 85: break;
          case 35: 
            { string.append('\n');
            } 
            // fall through
          case 86: break;
          case 36: 
            { Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 87: break;
          case 37: 
            { Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 88: break;
          case 38: 
            { Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 89: break;
          case 39: 
            { Symbol S = new Symbol(sym.CASE, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 90: break;
          case 40: 
            { Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 91: break;
          case 41: 
            { Symbol S = new Symbol(sym.CLASS, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 92: break;
          case 42: 
            { Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 93: break;
          case 43: 
            { Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 94: break;
          case 44: 
            { Symbol S = new Symbol(sym.STRING, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 95: break;
          case 45: 
            { Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 96: break;
          case 46: 
            { Symbol S = new Symbol(sym.STATIC, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 97: break;
          case 47: 
            { Symbol S = new Symbol(sym.SWITCH, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 98: break;
          case 48: 
            { Symbol S = new Symbol(sym.PUBLIC, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 99: break;
          case 49: 
            { Symbol S = new Symbol(sym.BOOLEAN, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 100: break;
          case 50: 
            { Symbol S = new Symbol(sym.DEFAULT, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 101: break;
          case 51: 
            { Symbol S = new Symbol(sym.SYSTEM_OUT, new TokenVal(yyline+1, yycolumn));
		return S;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
